
Autonomous Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000b08  00000b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800096  00800096  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000233b  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad5  00000000  00000000  00003153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ee  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006de  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4b  00000000  00000000  0000571a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006265  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <main>
  8a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPinDirection+0x6>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_setPinDirection+0xea>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_setPinDirection+0xc>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_setPinDirection+0xea>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_setPinDirection+0x12>
  a2:	6c c0       	rjmp	.+216    	; 0x17c <DIO_setPinDirection+0xea>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	01 f1       	breq	.+64     	; 0xe8 <DIO_setPinDirection+0x56>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_setPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	b1 f1       	breq	.+108    	; 0x11a <DIO_setPinDirection+0x88>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <DIO_setPinDirection+0xba>
  b4:	08 95       	ret
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_setPinDirection+0x3e>
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x30>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_setPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_setPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_setPinDirection+0x70>
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x62>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDirection+0x7c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDirection+0x78>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_setPinDirection+0xa2>
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x94>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_setPinDirection+0xd4>
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xca>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xc6>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_setPinDirection+0xe0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_setPinDirection+0xdc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_setPinValue>:
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_setPinValue+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_setPinValue+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_setPinValue+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_setPinValue+0xea>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	08 f0       	brcs	.+2      	; 0x190 <DIO_setPinValue+0x12>
 18e:	6c c0       	rjmp	.+216    	; 0x268 <DIO_setPinValue+0xea>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	01 f1       	breq	.+64     	; 0x1d4 <DIO_setPinValue+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_setPinValue+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b1 f1       	breq	.+108    	; 0x206 <DIO_setPinValue+0x88>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_setPinValue+0x22>
 19e:	4c c0       	rjmp	.+152    	; 0x238 <DIO_setPinValue+0xba>
 1a0:	08 95       	ret
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_setPinValue+0x3e>
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinValue+0x34>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinValue+0x30>
 1b6:	82 2b       	or	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_setPinValue+0x4a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_setPinValue+0x46>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_setPinValue+0x70>
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x66>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x62>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setPinValue+0x7c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setPinValue+0x78>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_setPinValue+0xa2>
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0x94>
 21a:	82 2b       	or	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_setPinValue+0xae>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_setPinValue+0xaa>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_setPinValue+0xd4>
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0xca>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0xc6>
 24c:	82 2b       	or	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_setPinValue+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_setPinValue+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <DIO_setPortDirection>:
}

/* Ports Apis */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	if( (PortId<=3) && ((PortDirection == DIO_PORT_OUTPUT) || (PortDirection ==  DIO_PORT_INPUT)) )
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	38 f5       	brcc	.+78     	; 0x2bc <DIO_setPortDirection+0x52>
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	96 0f       	add	r25, r22
 272:	9e 3f       	cpi	r25, 0xFE	; 254
 274:	18 f1       	brcs	.+70     	; 0x2bc <DIO_setPortDirection+0x52>
	{
		switch(PortId)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	69 f0       	breq	.+26     	; 0x294 <DIO_setPortDirection+0x2a>
 27a:	28 f0       	brcs	.+10     	; 0x286 <DIO_setPortDirection+0x1c>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	89 f0       	breq	.+34     	; 0x2a2 <DIO_setPortDirection+0x38>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	b1 f0       	breq	.+44     	; 0x2b0 <DIO_setPortDirection+0x46>
 284:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PORT_OUTPUT == PortDirection)
 286:	6f 3f       	cpi	r22, 0xFF	; 255
 288:	19 f4       	brne	.+6      	; 0x290 <DIO_setPortDirection+0x26>
			{
				DDRA = 0xff;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	8a bb       	out	0x1a, r24	; 26
 28e:	08 95       	ret
			}
			else
			{
				DDRA = 0x00;
 290:	1a ba       	out	0x1a, r1	; 26
 292:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PORT_OUTPUT == PortDirection)
 294:	6f 3f       	cpi	r22, 0xFF	; 255
 296:	19 f4       	brne	.+6      	; 0x29e <DIO_setPortDirection+0x34>
			{
				DDRB = 0xff;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	87 bb       	out	0x17, r24	; 23
 29c:	08 95       	ret
			}
			else
			{
				DDRB = 0x00;
 29e:	17 ba       	out	0x17, r1	; 23
 2a0:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PORT_OUTPUT == PortDirection)
 2a2:	6f 3f       	cpi	r22, 0xFF	; 255
 2a4:	19 f4       	brne	.+6      	; 0x2ac <DIO_setPortDirection+0x42>
			{
				DDRC = 0xff;
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	08 95       	ret
			}
			else
			{
				DDRC = 0x00;
 2ac:	14 ba       	out	0x14, r1	; 20
 2ae:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PORT_OUTPUT == PortDirection)
 2b0:	6f 3f       	cpi	r22, 0xFF	; 255
 2b2:	19 f4       	brne	.+6      	; 0x2ba <DIO_setPortDirection+0x50>
			{
				DDRD = 0xff;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	81 bb       	out	0x11, r24	; 17
 2b8:	08 95       	ret
			}
			else
			{
				DDRD = 0x00;
 2ba:	11 ba       	out	0x11, r1	; 17
 2bc:	08 95       	ret

000002be <write_half_port>:
	
	
}

static void write_half_port(u8 value)
{
 2be:	cf 93       	push	r28
 2c0:	c8 2f       	mov	r28, r24
	if (1== GET_BIT(value,0))
 2c2:	80 ff       	sbrs	r24, 0
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <write_half_port+0x14>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <write_half_port+0x1e>
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1== GET_BIT(value,1))
 2dc:	c1 ff       	sbrs	r28, 1
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <write_half_port+0x2e>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	65 e0       	ldi	r22, 0x05	; 5
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <write_half_port+0x38>
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	65 e0       	ldi	r22, 0x05	; 5
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1== GET_BIT(value,2))
 2f6:	c2 ff       	sbrs	r28, 2
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <write_half_port+0x48>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	66 e0       	ldi	r22, 0x06	; 6
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 304:	05 c0       	rjmp	.+10     	; 0x310 <write_half_port+0x52>
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1== GET_BIT(value,3))
 310:	c3 ff       	sbrs	r28, 3
 312:	06 c0       	rjmp	.+12     	; 0x320 <write_half_port+0x62>
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	67 e0       	ldi	r22, 0x07	; 7
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 31e:	05 c0       	rjmp	.+10     	; 0x32a <write_half_port+0x6c>
	}
	else
	{
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_sendCmnd>:
	LCD_sendCmnd(0b00000110);
	
}

void LCD_sendCmnd(u8 cmnd)
{
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
	//set Rs pin =0 (write command)
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//set Rw pin =0 (write)
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//write the most 4 bits of command on data pins
	write_half_port(cmnd>>4);
 346:	8c 2f       	mov	r24, r28
 348:	82 95       	swap	r24
 34a:	8f 70       	andi	r24, 0x0F	; 15
 34c:	0e 94 5f 01 	call	0x2be	; 0x2be <write_half_port>
	
	//Enable pulse high then low
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	63 e0       	ldi	r22, 0x03	; 3
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	8f e9       	ldi	r24, 0x9F	; 159
 35c:	9f e0       	ldi	r25, 0x0F	; 15
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_sendCmnd+0x30>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_sendCmnd+0x36>
 364:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//write the Least 4 bits of command on data pins
	write_half_port(cmnd);
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 5f 01 	call	0x2be	; 0x2be <write_half_port>
	
	//Enable pulse high then low
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <LCD_sendCmnd+0x56>
 388:	00 c0       	rjmp	.+0      	; 0x38a <LCD_sendCmnd+0x5c>
 38a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);	
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>

}
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <LCD_init>:
/* HAL */
#include "LCD_interface.h"

void LCD_init    (void)
{
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	65 e0       	ldi	r22, 0x05	; 5
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
 3e0:	2f e7       	ldi	r18, 0x7F	; 127
 3e2:	85 eb       	ldi	r24, 0xB5	; 181
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <LCD_init+0x4c>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_init+0x56>
 3f0:	00 00       	nop

	_delay_ms(35);
	//SET Rs pin TO 0 = COMMAND
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//SET Rw pin TO 0 = Write
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	write_half_port(0b0010);
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 5f 01 	call	0x2be	; 0x2be <write_half_port>
	
	//Enable Pulse High Then Low
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	90 ef       	ldi	r25, 0xF0	; 240
 434:	9a 95       	dec	r25
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	
	_delay_us(45);
	//Display Off Control (Display,Cursor,Blink)
	LCD_sendCmnd(0b00001100);
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_sendCmnd>
 43e:	20 ef       	ldi	r18, 0xF0	; 240
 440:	2a 95       	dec	r18
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	
	_delay_us(45);
	//Clear Display
	LCD_sendCmnd(0b00000001);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	9f e1       	ldi	r25, 0x1F	; 31
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
	
	_delay_ms(2);
	//Set Entry Mode
	LCD_sendCmnd(0b00000110);
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_sendCmnd>
 45c:	08 95       	ret

0000045e <LCD_sendChar>:
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);	

}

void LCD_sendChar(u8 data)
{
 45e:	cf 93       	push	r28
 460:	c8 2f       	mov	r28, r24
	//set Rs pin =1 (write data)
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//set Rw pin =0 (write)
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	62 e0       	ldi	r22, 0x02	; 2
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//write the most 4 bits of command on data pins
	write_half_port(data>>4);
 476:	8c 2f       	mov	r24, r28
 478:	82 95       	swap	r24
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	0e 94 5f 01 	call	0x2be	; 0x2be <write_half_port>
	
	//Enable pulse high then low
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_sendChar+0x30>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_sendChar+0x36>
 494:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//write the Least 4 bits of command on data pins
	write_half_port(data);
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 5f 01 	call	0x2be	; 0x2be <write_half_port>
	
	//Enable pulse high then low
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 4b0:	8f e9       	ldi	r24, 0x9F	; 159
 4b2:	9f e0       	ldi	r25, 0x0F	; 15
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_sendChar+0x56>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_sendChar+0x5c>
 4ba:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	
}
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <LCD_GoToPos>:
}

void LCD_GoToPos (u8 row ,u8 col)
{
	u8 Adress;
	if (row<2 && col<16)
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	50 f4       	brcc	.+20     	; 0x4e2 <LCD_GoToPos+0x18>
 4ce:	60 31       	cpi	r22, 0x10	; 16
 4d0:	40 f4       	brcc	.+16     	; 0x4e2 <LCD_GoToPos+0x18>
	{
		Adress= (row * 0b01000000) + col;
 4d2:	90 e4       	ldi	r25, 0x40	; 64
 4d4:	89 9f       	mul	r24, r25
 4d6:	60 0d       	add	r22, r0
 4d8:	11 24       	eor	r1, r1
 4da:	86 2f       	mov	r24, r22
		Adress=  SET_BIT(Adress,7);
		LCD_sendCmnd(Adress);
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_sendCmnd>
 4e2:	08 95       	ret

000004e4 <LCD_sendStr>:
	}
	
}

void LCD_sendStr (u8*str , u8 row , u8 col)
{
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	8c 01       	movw	r16, r24
 4f2:	d6 2f       	mov	r29, r22
 4f4:	f4 2e       	mov	r15, r20
  LCD_GoToPos(row,col);
 4f6:	64 2f       	mov	r22, r20
 4f8:	8d 2f       	mov	r24, r29
 4fa:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_GoToPos>
  u8 index=0;
  u8 line0=0;
 4fe:	e1 2c       	mov	r14, r1
}

void LCD_sendStr (u8*str , u8 row , u8 col)
{
  LCD_GoToPos(row,col);
  u8 index=0;
 500:	c0 e0       	ldi	r28, 0x00	; 0
  u8 line0=0;
  
  while(str[index] != NULL && ((row*16)+(index+col)) <32)
 502:	1b c0       	rjmp	.+54     	; 0x53a <LCD_sendStr+0x56>
  {
    if (((row*16)+(index+col)) <16)
 504:	20 31       	cpi	r18, 0x10	; 16
 506:	31 05       	cpc	r19, r1
 508:	24 f4       	brge	.+8      	; 0x512 <LCD_sendStr+0x2e>
    {
      LCD_sendChar(str[index]);
 50a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_sendChar>
      index++;
 50e:	cf 5f       	subi	r28, 0xFF	; 255
 510:	14 c0       	rjmp	.+40     	; 0x53a <LCD_sendStr+0x56>
    }
    else if (((row*16)+(index+col)) == 16 && line0==0)
 512:	20 31       	cpi	r18, 0x10	; 16
 514:	31 05       	cpc	r19, r1
 516:	41 f4       	brne	.+16     	; 0x528 <LCD_sendStr+0x44>
 518:	e1 10       	cpse	r14, r1
 51a:	06 c0       	rjmp	.+12     	; 0x528 <LCD_sendStr+0x44>
    {
      LCD_GoToPos(1,0);  
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_GoToPos>
      line0++;
 524:	e3 94       	inc	r14
 526:	09 c0       	rjmp	.+18     	; 0x53a <LCD_sendStr+0x56>
    }
    else if (((row*16)+(index+col)) < 32 && line0==1)
 528:	20 32       	cpi	r18, 0x20	; 32
 52a:	31 05       	cpc	r19, r1
 52c:	34 f4       	brge	.+12     	; 0x53a <LCD_sendStr+0x56>
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	e9 12       	cpse	r14, r25
 532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_sendStr+0x56>
    {
      LCD_sendChar(str[index]);
 534:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_sendChar>
      index++;  
 538:	cf 5f       	subi	r28, 0xFF	; 255
{
  LCD_GoToPos(row,col);
  u8 index=0;
  u8 line0=0;
  
  while(str[index] != NULL && ((row*16)+(index+col)) <32)
 53a:	f8 01       	movw	r30, r16
 53c:	ec 0f       	add	r30, r28
 53e:	f1 1d       	adc	r31, r1
 540:	80 81       	ld	r24, Z
 542:	88 23       	and	r24, r24
 544:	61 f0       	breq	.+24     	; 0x55e <LCD_sendStr+0x7a>
 546:	2f 2d       	mov	r18, r15
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	2c 0f       	add	r18, r28
 54c:	31 1d       	adc	r19, r1
 54e:	90 e1       	ldi	r25, 0x10	; 16
 550:	d9 9f       	mul	r29, r25
 552:	20 0d       	add	r18, r0
 554:	31 1d       	adc	r19, r1
 556:	11 24       	eor	r1, r1
 558:	20 32       	cpi	r18, 0x20	; 32
 55a:	31 05       	cpc	r19, r1
 55c:	9c f2       	brlt	.-90     	; 0x504 <LCD_sendStr+0x20>
    {
      LCD_sendChar(str[index]);
      index++;  
    }  
  }
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <LCD_TurnRight>:


void LCD_TurnRight  (void)
{
   LCD_init();
 56c:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
   LCD_sendStr("Turn Right" , 0 , 4);
 570:	44 e0       	ldi	r20, 0x04	; 4
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	80 e6       	ldi	r24, 0x60	; 96
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendStr>
 57c:	08 95       	ret

0000057e <LCD_TurnLeft>:
}

void LCD_TurnLeft  (void)
{
  LCD_init();
 57e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
  LCD_sendStr("Turn Left" , 0 , 4);
 582:	44 e0       	ldi	r20, 0x04	; 4
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	8b e6       	ldi	r24, 0x6B	; 107
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendStr>
 58e:	08 95       	ret

00000590 <LCD_MoveForward>:
}

void LCD_MoveForward (void)
{
  LCD_init();
 590:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
  LCD_sendStr("Move Forward" , 0 , 2);
 594:	42 e0       	ldi	r20, 0x02	; 2
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	85 e7       	ldi	r24, 0x75	; 117
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendStr>
 5a0:	08 95       	ret

000005a2 <LCD_MoveBackward>:
}

void LCD_MoveBackward (void)
{
  LCD_init();
 5a2:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
  LCD_sendStr("Move Backward" , 0 , 1);
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	82 e8       	ldi	r24, 0x82	; 130
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendStr>
 5b2:	08 95       	ret

000005b4 <LCD_Stop>:
}

void LCD_Stop (void)
{
	LCD_init();
 5b4:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
	LCD_sendStr("STOP" , 0 , 6);
 5b8:	46 e0       	ldi	r20, 0x06	; 6
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	80 e9       	ldi	r24, 0x90	; 144
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendStr>
 5c4:	08 95       	ret

000005c6 <main>:


int main(void)
{
	
	SERVO_init();
 5c6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SERVO_init>
	SENSOR_init();
 5ca:	0e 94 bf 04 	call	0x97e	; 0x97e <SENSOR_init>
	MOTOR_init();
 5ce:	0e 94 85 03 	call	0x70a	; 0x70a <MOTOR_init>
	LCD_init();
 5d2:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_init>
	static volatile u16 D_left;
	static volatile u16 D_right;

	while (1)
	{
		u16 dis = SENSOR_LOOP(); //DISTANCE MEASURED FROM SENSOR IN CM
 5d6:	0e 94 ca 04 	call	0x994	; 0x994 <SENSOR_LOOP>
		while( dis >= 20 )
 5da:	09 c0       	rjmp	.+18     	; 0x5ee <main+0x28>
		{
			LCD_MoveForward();
 5dc:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_MoveForward>
			MOTOR_rotateClockwise();
 5e0:	0e 94 8e 03 	call	0x71c	; 0x71c <MOTOR_rotateClockwise>
			dis = SENSOR_LOOP();
 5e4:	0e 94 ca 04 	call	0x994	; 0x994 <SENSOR_LOOP>
			if ( dis < 20)
 5e8:	84 31       	cpi	r24, 0x14	; 20
 5ea:	91 05       	cpc	r25, r1
 5ec:	10 f0       	brcs	.+4      	; 0x5f2 <main+0x2c>
	static volatile u16 D_right;

	while (1)
	{
		u16 dis = SENSOR_LOOP(); //DISTANCE MEASURED FROM SENSOR IN CM
		while( dis >= 20 )
 5ee:	44 97       	sbiw	r24, 0x14	; 20
 5f0:	a8 f7       	brcc	.-22     	; 0x5dc <main+0x16>
			{
				break;
			}
		}
		
		LCD_Stop();
 5f2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_Stop>
		MOTOR_stop();
 5f6:	0e 94 08 04 	call	0x810	; 0x810 <MOTOR_stop>
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	83 ed       	ldi	r24, 0xD3	; 211
 5fe:	90 e3       	ldi	r25, 0x30	; 48
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <main+0x3a>
 608:	00 c0       	rjmp	.+0      	; 0x60a <main+0x44>
 60a:	00 00       	nop
		_delay_ms(1000);
		
		SERVO_positive90Degree(); // FOR SCANING LEFT SIDE
 60c:	0e 94 0c 05 	call	0xa18	; 0xa18 <SERVO_positive90Degree>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	83 ed       	ldi	r24, 0xD3	; 211
 614:	90 e3       	ldi	r25, 0x30	; 48
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x50>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x5a>
 620:	00 00       	nop
		_delay_ms(1000);
		dis = SENSOR_LOOP();
 622:	0e 94 ca 04 	call	0x994	; 0x994 <SENSOR_LOOP>
		D_left = dis;
 626:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <D_left.1821+0x1>
 62a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <D_left.1821>
		SERVO_0Degree();
 62e:	0e 94 03 05 	call	0xa06	; 0xa06 <SERVO_0Degree>
		
		SERVO_negative90Degree(); // FOR SCANING RIGHT SIDE
 632:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SERVO_negative90Degree>
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	83 ed       	ldi	r24, 0xD3	; 211
 63a:	90 e3       	ldi	r25, 0x30	; 48
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <main+0x76>
 644:	00 c0       	rjmp	.+0      	; 0x646 <main+0x80>
 646:	00 00       	nop
		_delay_ms(1000);
		dis = SENSOR_LOOP();
 648:	0e 94 ca 04 	call	0x994	; 0x994 <SENSOR_LOOP>
		D_right = dis;
 64c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
 650:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
		SERVO_0Degree();
 654:	0e 94 03 05 	call	0xa06	; 0xa06 <SERVO_0Degree>
		
		//CHOOSING THE RIGHT SIDE TO MOVE
		if ( D_left > D_right && D_left > 20)
 658:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <D_left.1821>
 65c:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <D_left.1821+0x1>
 660:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 664:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 668:	82 17       	cp	r24, r18
 66a:	93 07       	cpc	r25, r19
 66c:	a0 f4       	brcc	.+40     	; 0x696 <main+0xd0>
 66e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <D_left.1821>
 672:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <D_left.1821+0x1>
 676:	45 97       	sbiw	r24, 0x15	; 21
 678:	70 f0       	brcs	.+28     	; 0x696 <main+0xd0>
		{
			
			LCD_TurnLeft();
 67a:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_TurnLeft>
			MOTOR_turnLeft();
 67e:	0e 94 82 04 	call	0x904	; 0x904 <MOTOR_turnLeft>
 682:	2f ef       	ldi	r18, 0xFF	; 255
 684:	83 ed       	ldi	r24, 0xD3	; 211
 686:	90 e3       	ldi	r25, 0x30	; 48
 688:	21 50       	subi	r18, 0x01	; 1
 68a:	80 40       	sbci	r24, 0x00	; 0
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <main+0xc2>
 690:	00 c0       	rjmp	.+0      	; 0x692 <main+0xcc>
 692:	00 00       	nop
 694:	a0 cf       	rjmp	.-192    	; 0x5d6 <main+0x10>
			_delay_ms(1000);     //ROTATE 90 DEGREE MEASURED BY OUR BATTERIES
			
		}
		
		else if ( D_right > D_left && D_right > 20)
 696:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__data_end>
 69a:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__data_end+0x1>
 69e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <D_left.1821>
 6a2:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <D_left.1821+0x1>
 6a6:	82 17       	cp	r24, r18
 6a8:	93 07       	cpc	r25, r19
 6aa:	a0 f4       	brcc	.+40     	; 0x6d4 <main+0x10e>
 6ac:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 6b0:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 6b4:	45 97       	sbiw	r24, 0x15	; 21
 6b6:	70 f0       	brcs	.+28     	; 0x6d4 <main+0x10e>
		{
			LCD_TurnRight();
 6b8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_TurnRight>
			MOTOR_turnRight();
 6bc:	0e 94 45 04 	call	0x88a	; 0x88a <MOTOR_turnRight>
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	83 ed       	ldi	r24, 0xD3	; 211
 6c4:	90 e3       	ldi	r25, 0x30	; 48
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	90 40       	sbci	r25, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <main+0x100>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <main+0x10a>
 6d0:	00 00       	nop
 6d2:	81 cf       	rjmp	.-254    	; 0x5d6 <main+0x10>
			_delay_ms(1000);    //ROTATE 90 DEGREE MEASURED BY OUR BATTERIES
		}
		
		else
		{
			LCD_MoveBackward();
 6d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_MoveBackward>
			MOTOR_rotateAntiClockwise();
 6d8:	0e 94 cb 03 	call	0x796	; 0x796 <MOTOR_rotateAntiClockwise>
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	87 ea       	ldi	r24, 0xA7	; 167
 6e0:	91 e6       	ldi	r25, 0x61	; 97
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x11c>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x126>
 6ec:	00 00       	nop
			
			_delay_ms(2000);
			
			LCD_TurnRight();
 6ee:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_TurnRight>
			MOTOR_turnRight();
 6f2:	0e 94 45 04 	call	0x88a	; 0x88a <MOTOR_turnRight>
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	83 ed       	ldi	r24, 0xD3	; 211
 6fa:	90 e3       	ldi	r25, 0x30	; 48
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	90 40       	sbci	r25, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <main+0x136>
 704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x140>
 706:	00 00       	nop
 708:	66 cf       	rjmp	.-308    	; 0x5d6 <main+0x10>

0000070a <MOTOR_init>:
#include "MOTOR_interface.h"


void MOTOR_init(void)
{
	  DIO_setPortDirection(DIO_PORTD,DIO_PORT_OUTPUT);   //Direction of PORTD Output
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	83 e0       	ldi	r24, 0x03	; 3
 70e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_setPortDirection>
	  DIO_setPortDirection(DIO_PORTC,DIO_PORT_OUTPUT);   //Direction of PORTC Output
 712:	6f ef       	ldi	r22, 0xFF	; 255
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_setPortDirection>
 71a:	08 95       	ret

0000071c <MOTOR_rotateClockwise>:

void MOTOR_rotateClockwise(void)
{
	//MOVE FORWARD
	//Motor 1
	DIO_setPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH); //IN1
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);  //IN2
 726:	40 e0       	ldi	r20, 0x00	; 0
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH); //ENABLE1
 730:	41 e0       	ldi	r20, 0x01	; 1
 732:	62 e0       	ldi	r22, 0x02	; 2
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 2
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH); //IN3
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	64 e0       	ldi	r22, 0x04	; 4
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);  //IN4
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	65 e0       	ldi	r22, 0x05	; 5
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH); //ENABLE2
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	63 e0       	ldi	r22, 0x03	; 3
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 3
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH); //IN1
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	66 e0       	ldi	r22, 0x06	; 6
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW); //IN2
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	67 e0       	ldi	r22, 0x07	; 7
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN0,DIO_PIN_HIGH); //ENABLE3
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 4
	DIO_setPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH); //IN3
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	62 e0       	ldi	r22, 0x02	; 2
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW); //IN4
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	63 e0       	ldi	r22, 0x03	; 3
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN1,DIO_PIN_HIGH); //ENABLE4
 78a:	41 e0       	ldi	r20, 0x01	; 1
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 794:	08 95       	ret

00000796 <MOTOR_rotateAntiClockwise>:

void MOTOR_rotateAntiClockwise(void)
{
	//MOVE BACKWARD
	//Motor 1
	DIO_setPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH); //IN2
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);  //IN1
 7a0:	40 e0       	ldi	r20, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH); //ENABLE1
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 2
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW); //IN4
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	64 e0       	ldi	r22, 0x04	; 4
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);  //IN3
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	65 e0       	ldi	r22, 0x05	; 5
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH); //ENABLE2
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	63 e0       	ldi	r22, 0x03	; 3
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 3
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	66 e0       	ldi	r22, 0x06	; 6
 7d6:	82 e0       	ldi	r24, 0x02	; 2
 7d8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	67 e0       	ldi	r22, 0x07	; 7
 7e0:	82 e0       	ldi	r24, 0x02	; 2
 7e2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN0,DIO_PIN_HIGH); //ENABLE3
 7e6:	41 e0       	ldi	r20, 0x01	; 1
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	83 e0       	ldi	r24, 0x03	; 3
 7ec:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 4
	DIO_setPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
 7f0:	40 e0       	ldi	r20, 0x00	; 0
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	83 e0       	ldi	r24, 0x03	; 3
 7f6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN1,DIO_PIN_HIGH); //ENABLE4
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 80e:	08 95       	ret

00000810 <MOTOR_stop>:

void MOTOR_stop(void)
{
	
	//Motor 1
	DIO_setPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW); //ENABLE3
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	62 e0       	ldi	r22, 0x02	; 2
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 2
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	64 e0       	ldi	r22, 0x04	; 4
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	65 e0       	ldi	r22, 0x05	; 5
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW); //ENABLE4
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	63 e0       	ldi	r22, 0x03	; 3
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 3
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	66 e0       	ldi	r22, 0x06	; 6
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	67 e0       	ldi	r22, 0x07	; 7
 85a:	82 e0       	ldi	r24, 0x02	; 2
 85c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN0,DIO_PIN_LOW); //ENABLE1
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	83 e0       	ldi	r24, 0x03	; 3
 866:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//Motor 4
	DIO_setPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
 86a:	40 e0       	ldi	r20, 0x00	; 0
 86c:	62 e0       	ldi	r22, 0x02	; 2
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 874:	40 e0       	ldi	r20, 0x00	; 0
 876:	63 e0       	ldi	r22, 0x03	; 3
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN1,DIO_PIN_LOW); //ENABLE2
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 888:	08 95       	ret

0000088a <MOTOR_turnRight>:
void MOTOR_turnRight(void)
{
	
	//MOTOR 2 & 4 CLOCKWISE
	//Motor 2
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH); //IN3
 88a:	41 e0       	ldi	r20, 0x01	; 1
 88c:	64 e0       	ldi	r22, 0x04	; 4
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);  //IN4
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	65 e0       	ldi	r22, 0x05	; 5
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH); //ENABLE2
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	63 e0       	ldi	r22, 0x03	; 3
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	//Motor 4
	DIO_setPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH); //IN3
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	62 e0       	ldi	r22, 0x02	; 2
 8ac:	83 e0       	ldi	r24, 0x03	; 3
 8ae:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW); //IN4
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	63 e0       	ldi	r22, 0x03	; 3
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN1,DIO_PIN_HIGH); //ENABLE4
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	83 e0       	ldi	r24, 0x03	; 3
 8c2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//MOTOR 1 & 3 ANTI-CLOCKWISE
	//Motor 1
	DIO_setPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH); //IN2
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	61 e0       	ldi	r22, 0x01	; 1
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);  //IN1
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH); //ENABLE1
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	62 e0       	ldi	r22, 0x02	; 2
 8de:	82 e0       	ldi	r24, 0x02	; 2
 8e0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	//Motor 3
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	66 e0       	ldi	r22, 0x06	; 6
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 8ee:	41 e0       	ldi	r20, 0x01	; 1
 8f0:	67 e0       	ldi	r22, 0x07	; 7
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN0,DIO_PIN_HIGH); //ENABLE3
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 902:	08 95       	ret

00000904 <MOTOR_turnLeft>:
void MOTOR_turnLeft(void)
{
	
	//MOTOR 1 & 3 CLOCKWISE
	//Motor 1
	DIO_setPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);  //IN2
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH); //IN1
 90e:	41 e0       	ldi	r20, 0x01	; 1
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH); //ENABLE1
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	62 e0       	ldi	r22, 0x02	; 2
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	//Motor 3
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH); //IN1
 922:	41 e0       	ldi	r20, 0x01	; 1
 924:	66 e0       	ldi	r22, 0x06	; 6
 926:	82 e0       	ldi	r24, 0x02	; 2
 928:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW); //IN2
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	67 e0       	ldi	r22, 0x07	; 7
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN0,DIO_PIN_HIGH); //ENABLE3
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	83 e0       	ldi	r24, 0x03	; 3
 93c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	//MOTOR 2 & 4 ANTI-CLOCKWISE
	//Motor 2
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW); //IN4
 940:	40 e0       	ldi	r20, 0x00	; 0
 942:	64 e0       	ldi	r22, 0x04	; 4
 944:	82 e0       	ldi	r24, 0x02	; 2
 946:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);  //IN3
 94a:	41 e0       	ldi	r20, 0x01	; 1
 94c:	65 e0       	ldi	r22, 0x05	; 5
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH); //ENABLE2
 954:	41 e0       	ldi	r20, 0x01	; 1
 956:	63 e0       	ldi	r22, 0x03	; 3
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	//Motor 4
	DIO_setPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_LOW);
 95e:	40 e0       	ldi	r20, 0x00	; 0
 960:	62 e0       	ldi	r22, 0x02	; 2
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 968:	41 e0       	ldi	r20, 0x01	; 1
 96a:	63 e0       	ldi	r22, 0x03	; 3
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN1,DIO_PIN_HIGH); //ENABLE4
 972:	41 e0       	ldi	r20, 0x01	; 1
 974:	61 e0       	ldi	r22, 0x01	; 1
 976:	83 e0       	ldi	r24, 0x03	; 3
 978:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 97c:	08 95       	ret

0000097e <SENSOR_init>:

static volatile int pulse = 0;

void SENSOR_init(void)
{
	DIO_setPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_OUTPUT);  // TRIGGER PA0 OP
 97e:	41 e0       	ldi	r20, 0x01	; 1
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN1,DIO_PIN_INPUT);   //  ECHO   PA1 IP	
 988:	40 e0       	ldi	r20, 0x00	; 0
 98a:	61 e0       	ldi	r22, 0x01	; 1
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
 992:	08 95       	ret

00000994 <SENSOR_LOOP>:

u16 SENSOR_LOOP(void)
{
	u16 Distance=0;
	
	TMR_timerInitNormalMode();
 994:	0e 94 2c 05 	call	0xa58	; 0xa58 <TMR_timerInitNormalMode>
	TCNT1_u16 = 0;    //reset timer1 register
 998:	1d bc       	out	0x2d, r1	; 45
 99a:	1c bc       	out	0x2c, r1	; 44
	
	//Transmit 10 us trigger pulse
	DIO_setPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
 99c:	41 e0       	ldi	r20, 0x01	; 1
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9a6:	85 e3       	ldi	r24, 0x35	; 53
 9a8:	8a 95       	dec	r24
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <SENSOR_LOOP+0x14>
 9ac:	00 00       	nop
	_delay_us(10);
	DIO_setPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
 9ae:	40 e0       	ldi	r20, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	while (GET_BIT(PINA,1) == 0);
 9b8:	c9 9b       	sbis	0x19, 1	; 25
 9ba:	fe cf       	rjmp	.-4      	; 0x9b8 <SENSOR_LOOP+0x24>
	TMR_Timer1_start();   //start counting if echo is high
 9bc:	0e 94 43 05 	call	0xa86	; 0xa86 <TMR_Timer1_start>
	
	while (GET_BIT(PINA,1) == 1);
 9c0:	c9 99       	sbic	0x19, 1	; 25
 9c2:	fe cf       	rjmp	.-4      	; 0x9c0 <SENSOR_LOOP+0x2c>
	TMR_timer1_stop();    //stop counting if echo is low
 9c4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <TMR_timer1_stop>
	
	pulse = TCNT1_u16;  
 9c8:	8c b5       	in	r24, 0x2c	; 44
 9ca:	9d b5       	in	r25, 0x2d	; 45
 9cc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <pulse+0x1>
 9d0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <pulse>
	Distance = pulse/116 ;  //16MHZ , 8 prescaller
 9d4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <pulse>
 9d8:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <pulse+0x1>
 9dc:	64 e7       	ldi	r22, 0x74	; 116
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodhi4>
 9e4:	cb 01       	movw	r24, r22
	
	return Distance;
	
}
 9e6:	08 95       	ret

000009e8 <SERVO_init>:
/* HAL */
#include "servo_interface.h"

void SERVO_init(void)
{
	DIO_setPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);  //Direction of PIND5 OUTPUT
 9e8:	41 e0       	ldi	r20, 0x01	; 1
 9ea:	65 e0       	ldi	r22, 0x05	; 5
 9ec:	83 e0       	ldi	r24, 0x03	; 3
 9ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
 9f2:	08 95       	ret

000009f4 <SERVO_negative90Degree>:
}

void SERVO_negative90Degree(void)
{
	TMR_timer1InitFastPWM();
 9f4:	0e 94 15 05 	call	0xa2a	; 0xa2a <TMR_timer1InitFastPWM>
	TMR_timer1_setCompareMatchAValue(9999); // duty cycle 1ms
 9f8:	8f e0       	ldi	r24, 0x0F	; 15
 9fa:	97 e2       	ldi	r25, 0x27	; 39
 9fc:	0e 94 57 05 	call	0xaae	; 0xaae <TMR_timer1_setCompareMatchAValue>
	TMR_timer1Enable();
 a00:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_timer1Enable>
 a04:	08 95       	ret

00000a06 <SERVO_0Degree>:
}

void SERVO_0Degree(void)
{
	TMR_timer1InitFastPWM();
 a06:	0e 94 15 05 	call	0xa2a	; 0xa2a <TMR_timer1InitFastPWM>
	TMR_timer1_setCompareMatchAValue(23999);  //duty cycle 1.5ms
 a0a:	8f eb       	ldi	r24, 0xBF	; 191
 a0c:	9d e5       	ldi	r25, 0x5D	; 93
 a0e:	0e 94 57 05 	call	0xaae	; 0xaae <TMR_timer1_setCompareMatchAValue>
	TMR_timer1Enable();
 a12:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_timer1Enable>
 a16:	08 95       	ret

00000a18 <SERVO_positive90Degree>:
}

void SERVO_positive90Degree(void)
{
	TMR_timer1InitFastPWM();
 a18:	0e 94 15 05 	call	0xa2a	; 0xa2a <TMR_timer1InitFastPWM>
	TMR_timer1_setCompareMatchAValue(38999);  //duty cycle 2ms
 a1c:	87 e5       	ldi	r24, 0x57	; 87
 a1e:	98 e9       	ldi	r25, 0x98	; 152
 a20:	0e 94 57 05 	call	0xaae	; 0xaae <TMR_timer1_setCompareMatchAValue>
	TMR_timer1Enable();
 a24:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_timer1Enable>
 a28:	08 95       	ret

00000a2a <TMR_timer1InitFastPWM>:
#include "tmr1_interface.h"

void TMR_timer1InitFastPWM(void)
{
	//Select Mode = Fast PWM Mode (14)
	CLR_BIT(TCCR1A,0);
 a2a:	8f b5       	in	r24, 0x2f	; 47
 a2c:	8e 7f       	andi	r24, 0xFE	; 254
 a2e:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
 a30:	8f b5       	in	r24, 0x2f	; 47
 a32:	82 60       	ori	r24, 0x02	; 2
 a34:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 a36:	8e b5       	in	r24, 0x2e	; 46
 a38:	88 60       	ori	r24, 0x08	; 8
 a3a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
 a3c:	8e b5       	in	r24, 0x2e	; 46
 a3e:	80 61       	ori	r24, 0x10	; 16
 a40:	8e bd       	out	0x2e, r24	; 46
	
	//Select Non Inverting Mode
	CLR_BIT(TCCR1A,6);
 a42:	8f b5       	in	r24, 0x2f	; 47
 a44:	8f 7b       	andi	r24, 0xBF	; 191
 a46:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
 a48:	8f b5       	in	r24, 0x2f	; 47
 a4a:	80 68       	ori	r24, 0x80	; 128
 a4c:	8f bd       	out	0x2f, r24	; 47
	
	//Set Max Of Timer
	ICR1_u16 = TMR_TIMER1_TOP_VALUE;   //(16MHZ / 1*50) - 1
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	91 ee       	ldi	r25, 0xE1	; 225
 a52:	97 bd       	out	0x27, r25	; 39
 a54:	86 bd       	out	0x26, r24	; 38
 a56:	08 95       	ret

00000a58 <TMR_timerInitNormalMode>:
	
}

void TMR_timerInitNormalMode(void)
{
	CLR_BIT(TCCR1A,0);
 a58:	8f b5       	in	r24, 0x2f	; 47
 a5a:	8e 7f       	andi	r24, 0xFE	; 254
 a5c:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,1);
 a5e:	8f b5       	in	r24, 0x2f	; 47
 a60:	8d 7f       	andi	r24, 0xFD	; 253
 a62:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1B,3);
 a64:	8e b5       	in	r24, 0x2e	; 46
 a66:	87 7f       	andi	r24, 0xF7	; 247
 a68:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,4);
 a6a:	8e b5       	in	r24, 0x2e	; 46
 a6c:	8f 7e       	andi	r24, 0xEF	; 239
 a6e:	8e bd       	out	0x2e, r24	; 46
 a70:	08 95       	ret

00000a72 <TMR_timer1Enable>:
}

void TMR_timer1Enable(void)
{
	//Select Prescaler Value = 1
	SET_BIT(TCCR1B,0);
 a72:	8e b5       	in	r24, 0x2e	; 46
 a74:	81 60       	ori	r24, 0x01	; 1
 a76:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
 a78:	8e b5       	in	r24, 0x2e	; 46
 a7a:	8d 7f       	andi	r24, 0xFD	; 253
 a7c:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 a7e:	8e b5       	in	r24, 0x2e	; 46
 a80:	8b 7f       	andi	r24, 0xFB	; 251
 a82:	8e bd       	out	0x2e, r24	; 46
 a84:	08 95       	ret

00000a86 <TMR_Timer1_start>:
}

void TMR_Timer1_start(void)
{
	//Select Prescaler Value = 8
	CLR_BIT(TCCR1B,0);
 a86:	8e b5       	in	r24, 0x2e	; 46
 a88:	8e 7f       	andi	r24, 0xFE	; 254
 a8a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
 a8c:	8e b5       	in	r24, 0x2e	; 46
 a8e:	82 60       	ori	r24, 0x02	; 2
 a90:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 a92:	8e b5       	in	r24, 0x2e	; 46
 a94:	8b 7f       	andi	r24, 0xFB	; 251
 a96:	8e bd       	out	0x2e, r24	; 46
 a98:	08 95       	ret

00000a9a <TMR_timer1_stop>:
}

void TMR_timer1_stop(void)
{
	CLR_BIT(TCCR1B,0);
 a9a:	8e b5       	in	r24, 0x2e	; 46
 a9c:	8e 7f       	andi	r24, 0xFE	; 254
 a9e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
 aa0:	8e b5       	in	r24, 0x2e	; 46
 aa2:	8d 7f       	andi	r24, 0xFD	; 253
 aa4:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 aa6:	8e b5       	in	r24, 0x2e	; 46
 aa8:	8b 7f       	andi	r24, 0xFB	; 251
 aaa:	8e bd       	out	0x2e, r24	; 46
 aac:	08 95       	ret

00000aae <TMR_timer1_setCompareMatchAValue>:
}

void TMR_timer1_setCompareMatchAValue(u16 compareValue)
{
	//Init Timer with compare value
	OCR1A_u16 = compareValue;
 aae:	9b bd       	out	0x2b, r25	; 43
 ab0:	8a bd       	out	0x2a, r24	; 42
 ab2:	08 95       	ret

00000ab4 <__divmodhi4>:
 ab4:	97 fb       	bst	r25, 7
 ab6:	07 2e       	mov	r0, r23
 ab8:	16 f4       	brtc	.+4      	; 0xabe <__divmodhi4+0xa>
 aba:	00 94       	com	r0
 abc:	07 d0       	rcall	.+14     	; 0xacc <__divmodhi4_neg1>
 abe:	77 fd       	sbrc	r23, 7
 ac0:	09 d0       	rcall	.+18     	; 0xad4 <__divmodhi4_neg2>
 ac2:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodhi4>
 ac6:	07 fc       	sbrc	r0, 7
 ac8:	05 d0       	rcall	.+10     	; 0xad4 <__divmodhi4_neg2>
 aca:	3e f4       	brtc	.+14     	; 0xada <__divmodhi4_exit>

00000acc <__divmodhi4_neg1>:
 acc:	90 95       	com	r25
 ace:	81 95       	neg	r24
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	08 95       	ret

00000ad4 <__divmodhi4_neg2>:
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255

00000ada <__divmodhi4_exit>:
 ada:	08 95       	ret

00000adc <__udivmodhi4>:
 adc:	aa 1b       	sub	r26, r26
 ade:	bb 1b       	sub	r27, r27
 ae0:	51 e1       	ldi	r21, 0x11	; 17
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__udivmodhi4_ep>

00000ae4 <__udivmodhi4_loop>:
 ae4:	aa 1f       	adc	r26, r26
 ae6:	bb 1f       	adc	r27, r27
 ae8:	a6 17       	cp	r26, r22
 aea:	b7 07       	cpc	r27, r23
 aec:	10 f0       	brcs	.+4      	; 0xaf2 <__udivmodhi4_ep>
 aee:	a6 1b       	sub	r26, r22
 af0:	b7 0b       	sbc	r27, r23

00000af2 <__udivmodhi4_ep>:
 af2:	88 1f       	adc	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	5a 95       	dec	r21
 af8:	a9 f7       	brne	.-22     	; 0xae4 <__udivmodhi4_loop>
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	bc 01       	movw	r22, r24
 b00:	cd 01       	movw	r24, r26
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
